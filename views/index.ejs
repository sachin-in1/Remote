<!DOCTYPE html>
<html lang="en">
<head>
    <% include ./partials/head %>

    <link rel='stylesheet' href='/stylesheets/style.css' />

</head>
<body class="container">

<header>
    <% include ./partials/header %>
</header>

<main>
    <div class="jumbotron">
        <!-- <h1>This is great</h1> -->
        <h1></h1>
        <div id="player"  onclick=log()></div>
        <div class="container">
            <div class="row">
              <div class="col-sm" onclick=onPlayerStateChange(1)>
                play
              </div>
              <div class="col-sm" onclick=onPlayerStateChange(event) >
                pause
              </div>
              <div class="col-sm">
                One of three columns
              </div>
            </div>
          </div>

        

    </div>
</main>

<!--footer>
    < < % include ./partials/footer %> >
</footer -->

</body>
<script>
    function log(){
        console.log("hiii");
        
    }
    // 2. This code loads the IFrame Player API code asynchronously.
    var tag = document.createElement('script');

    tag.src = "https://www.youtube.com/iframe_api";
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

    // 3. This function creates an <iframe> (and YouTube player)
    //    after the API code downloads.
    var player;
    function onYouTubeIframeAPIReady() {
    player = new YT.Player('player', {
        height: '390',
        width: '640',
        // listType: 'playlist',
        // list: '',
        videoId: 'E_cTdhd88mk',
        // listType: 'user_uploads',
        // list: 'UCaM-XmpUbe5aXOY9lvp6-Eg',

        events: {
        'onReady': onPlayerReady,
        'onStateChange': onPlayerStateChange,
        },
        playerVars : {
        // 'autoplay': 1,
        'controls': 0,
        'enablejsapi': 1,
        'disablekb': 1,
        'modestbranding': 1,
        'rel': 0,
        // 'autohide': 1
        },
    });
    }

    // 4. The API will call this function when the video player is ready.
    function onPlayerReady(event) {
    event.target.playVideo();
    }

    // 5. The API calls this function when the player's state changes.
    //    The function indicates that when playing a video (state=1),
    //    the player should play for six seconds and then stop.
    var done = false;
    function onPlayerStateChange(event) {

        console.log(String(event.data));
        // console.log(YT.PlayerState.PAUSED);
        
    if (event.data == YT.PlayerState.PLAYING && !done) {
        setTimeout(stopVideo, 6000);
        done = true;
    }
    }
    function stopVideo() {
    player.stopVideo();
    }
</script>
</html>