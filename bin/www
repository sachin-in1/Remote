#!/usr/bin/env node
var app = require('../app');
var debug = require('debug')('remote:server');
var http = require('http');
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
var server = http.createServer(app);
var io          = require('socket.io')(server);
var ejs         = require('ejs');
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);



var count;
var i=count==null?0:null;
console.log('count is '+count);

io.on('connection', function(socket) {
  count= socket.client.conn.server.clientsCount;
  console.log(socket.client.conn.server.clientsCount+ '  users connected');
  i=count!=1?i:0;
console.log('count is '+count);
  console.log("index is ",i);
  io.emit('i',i);
  socket.on('chat message', function(msg){
      console.log('message: ' + msg);
      // socket.broadcast.emit('chat message: '+msg);
    });
    socket.on('stop', function(msg){
      console.log('index: ' + msg);
      i=msg;
        });//stop recieve
  socket.on('play', function(msg){
    console.log('time: ' + msg+"  "+i);
      });//play recieve
  socket.on('seek', function(msg){
    console.log('time: ' + msg+"  "+i);
      });//seek
  socket.on('next', function(msg){
    console.log('next: ' + msg);
      });//next recieve
  socket.on('i', function(msg){
    i=msg;
    console.log('i: ' + msg);
      });//i recieve

});

io.on('connection', (socket) => {

  socket.on('chat message', (msg) => {
    io.emit('chat message', msg);
  });//chat
  socket.on('play', (msg) => {
    io.emit('play',msg);
  });//play
  socket.on('next', (msg) => {
    io.emit('next',msg);
  });//next
  socket.on('i', (msg) => {
    io.emit('i',msg);
  });//i sync
  socket.on('seek', (msg) => {
    io.emit('seek',msg);
  });//seek
  socket.on('pause', (msg) => {
    io.emit('pause',msg);
  });//pause
  socket.on('stop', (msg) => {
    io.emit('stop',msg);
  });//next
});

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
